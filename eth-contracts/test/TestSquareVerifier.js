// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var TestContract = artifacts.require('TestContract');
// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

let proof = require('../../zokrates/code/square/proof');


// Test verification with incorrect proof
contract('TestSquareVerifier', accounts => {

    const origin = accounts[0];

    describe('have ownership properties', function () {
        beforeEach(async function () {
            this.contract = await TestContract.new({ from: origin });
        })

        it('test proof correct', async function () {
            const { proof: { a, b, c }, inputs: inputs } = proof;
            let pass = await this.contract.verifyTx.call(a, b,c, inputs, {from:origin});
            assert.equal(pass, true, "Proof was correct but failed");
        })

        it('rest proof wrong', async function () { 
            const { proof: { a, b, c }, inputs: inputs } = proof;
            let pass = await this.contract.verifyTx.call(a, b,c, [7,8], {from:origin});
            assert.equal(pass, false, "Proof was incorrect but failed");
        })
    });
})